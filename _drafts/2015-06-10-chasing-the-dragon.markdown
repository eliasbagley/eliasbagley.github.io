Chasing the Dragon

Programmers are a perfectionistic bunch. Early in our programming careers, we got a taste of perfection when writing simple programs. These simple programs are usually no more than prompting for some simple user input, doing some small processing, and printing a string out to the console. The whole program is less than 100 lines of code. With a program this simple, it's possible to get the logic completely bug free, and to stylicstally format the code to perfection. However, as program size increases, complexity increases superlinearlly. I call this chasing the dragon. Programmers are constanly chasing after the illusive perfection in their code, but perfection is an impossible illusion. We envision a program in our head, and we idealize it and want to put this perfection into our code. As we create the code, reality of interacting with an imperfect programming paradigm and tools creep in, and our creation falls short. Furthermore, the time we spend working on our program increases our skills, so by the time we finish, we have the hindsight to realize how we could have created it better. So we refactor and fix the blemishes, trying to nudge our program one step closer to its idealized version in our heads. As we fix the blemishes and work on it further, our skills further increase. Our skills and idealized perfection are always one step ahead of our actual creation, and from this will never actually be attained.
